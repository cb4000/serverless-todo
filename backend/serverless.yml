service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  #- serverless-aws-documentation
  - serverless-plugin-tracing
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline
provider:
  tracing:
    lambda: true
    apiGateway: true

  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    AUTH_0_SECRET: ${ssm:/udacity/todos-auth0-clientkey}
    IMAGES_S3_BUCKET: s3udacitycourse4projimages
    TODOS_TABLE: todosTable
functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          cors: true
          path: todos
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:Scan
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}


  # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          cors: true
          path: todos
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          cors: true
          path: todos/{todoId}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          cors: true
          path: todos/{todoId}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          cors: true
          path: todos/{todoId}/attachment
    iamRoleStatements:
      - Effect: Allow
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
        Action:
          - dynamodb:Scan
          - dynamodb:PutItem
          - dynamodb:DeleteItem
          - s3:PutObject
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
   

resources:
  Resources:
    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: todosTable
    

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    #$(ssm:/aws/reference/secretsmanager/)
    # TODO: Add any necessary AWS resources
